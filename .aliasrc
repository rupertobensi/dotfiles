#!/bin/sh

# Use neovim for vim if present.
command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d"

# Verbosity and optimized settings
alias \
	bat="cat /sys/class/power_supply/BAT?/capacity" \
	cp="cp -iv" \
	mv="mv -iv" \
	rm="rm -vI" \
	mkd="mkdir -pv" \
	YT="youtube-dl --add-metadata -i" \
    YTmp3="youtube-dl -x --audio-format mp3" \
	YTA="YT -x -f bestaudio/best" \
	ffmpeg="ffmpeg -hide_banner"

# Colorize commands when possible.
alias \
	ls="ls -hN --color=auto --group-directories-first" \
	grep="grep --color=auto" \
	diff="diff --color=auto" \
	ccat="highlight --out-format=ansi"

# These common commands are just too long! Abbreviate them.
alias \
	ka="killall" \
	yt="straw-viewer" \
	sdn="sudo shutdown -h now" \
	rdn="sudo reboot" \
	f="$FILE" \
	sf="sudo $FILE" \
	e="$EDITOR" \
    se="sudo $EDITOR" \
	n="nnn" \
	p="sudo pacman"


# Config shortcuts
alias \
	cfalacritty.yml="nvim ~/.config/alacritty/alacritty.yml" \
	cfalacritty_dd.yml="nvim ~/.config/alacritty/alacritty_dd.yml" \
	cfaliasrc="nvim ~/.aliasrc" \
    cfcode_settings.json="nvim ~/.config/Code\ -\ OSS/User/settings.json" \
	cffonts.conf="nvim ~/.config/fontconfig/fonts.conf" \
	cfi3_config="nvim ~/.config/i3/config" \
	cfmpd.conf="nvim ~/.mpd/mpd.conf" \
	cfmpv.conf="nvim ~/.config/mpv/mpv.conf" \
	cfmpv_input.conf="nvim ~/.config/mpv/input.conf" \
	cfncmpcpp_bindings="nvim ~/.ncmpcpp/bindings" \
	cfncmpcpp_config="nvim ~/.ncmpcpp/config" \
	cfnewsboat_config="nvim ~/.config/newsboat/config" \
	cfnewsboat_urls="nvim ~/.config/newsboat/urls" \
	cfnvim_init.vim="nvim ~/.config/nvim/init.vim" \
	cfnvim_plugins="nvim ~/.config/nvim/plugins.vim" \
	cfpicom.conf="nvim ~/.config/picom/picom.conf" \
	cfpolybar_config="nvim ~/.config/polybar/config" \
	cfranger_rc.conf="nvim ~/.config/ranger/rc.conf" \
	cfranger_rifle.conf="nvim ~/.config/ranger/rifle.conf" \
	cfst_config.h="nvim ~/st/config.h" \
	cftmux.conf="nvim ~/.tmux.conf" \
	cfxinitrc="nvim ~/.xinitrc" \
	cfxprofile="nvim ~/.xprofile" \
	cfXresources="nvim ~/.Xresources" \
	cfzprezto="nvim ~/.zprezto/runcoms/.zpreztorc" \
	cfzprofile="nvim ~/.zprofile" \
	cfzshenv="nvim ~/.zshenv" \
	cfzshrc="nvim ~/.zshrc"

# Monitor configuration shortcuts
alias m2off="xrandr --output DVI-I-0 --off"
alias m2on="xrandr --output HDMI-A-0 --primary --mode 1920x1080 --output DVI-I-0 --mode 1280x1024 --right-of HDMI-A-0; (pbr &)"

# Various programs
alias \
    ab-pr="absolutely-proprietary" \
    audio="pulsemixer" \
    Cal="calcurse" \
    deezer="smloadr" \
    fm="vifmrun" \
    imgur="imgur_downloader" \
    keep="keepassxc-cli" \
    nc="ncmpcpp" \
    newsb="newsboat" \
    rtv="tuir" \
    spc="cdu -idh" \
    tra="tremc"

# trash-cli
alias \
tli="trash-list" \
tp="trash-put" \
tre="trash-restore" \
tem="trash-empty"

alias \
bitcoin2="curl rate.sx" \
bitcoin="cointop" \
corona="curl -L covid19.trackercli.com" \
duck="ddgr" \
emoticon="echo ðŸ˜º" \
google="googler" \
nitrogens="nitrogen --set-zoom-fill --save" \
stocks="mop" \
sudoku="nudoku" \
tilixp="tilix --preferences"

alias \
visudo!="sudo EDITOR=nvim visudo" \
wali="wal -i" \
walr="wal -R" \
wttr="curl wttr.in"

# notes (compatible with VimWiki plugin)
alias \
note="nvim /mnt/e/Robert/DROPBOX/Linux/index.md" \
notes="nvim /mnt/e/Robert/DROPBOX/Linux/notes.md" \
notesa="nvim /mnt/e/Robert/DROPBOX/Linux/README.md" \
notesc="nvim /mnt/e/Robert/DROPBOX/Linux/cheatsheet.md" \
notesl="nvim /mnt/e/Robert/DROPBOX/Linux/notes_LIN.md" \
notesyay="nvim /mnt/e/Robert/DROPBOX/Linux/yaypacman.md" \
notesw="nvim /mnt/e/Robert/DROPBOX/Linux/windows.md"

# this copies the output of a program to the clipboard for easy use elsewhere (Ctrl+V). For #example, I copied the above line from my .bashrc using this: grep xclip .bashrc | xc
alias xc="xclip -sel clipboard"
# copy with progress bars:
alias pmv="pymv --preserve --global-pbar -i"
alias pcp="pycp --preserve --global-pbar -i"
# ncmpcpp scripts:
alias muzc="/home/robi/.dotfiles/.ncmpcpp/cover.sh"
alias ncm="tmux source-file ~/.ncmpcpp/tmux_session" # Tmux session with ncmpcpp and cover art
alias Ncm="tmux source-file ~/.ncmpcpp/tmux_session_neww" # Same but in a new tmux window

# root privileges
alias doas="doas --"

# get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

# get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

# the terminal rickroll
alias rickroll='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'
alias piotrbiu='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'

# KDE logout with confirmation, without and locking widgets. Also, i3 exit.
alias kdel="qdbus org.kde.ksmserver /KSMServer logout 0 3 3"
alias kdeL="qdbus org.kde.ksmserver /KSMServer logout 1 3 3"
alias i3e="i3 exit"
alias i3s="i3-save-tree"

# Run megasync client without some QT variables
#alias megax="DO_NOT_UNSET_QT_QPA_PLATFORMTHEME=1 DO_NOT_SET_DESKTOP_SETTINGS_UNAWARE=1 megasync"
alias megs="mega-sync"
# KDE aliases for locking/unlocking plasma
#alias kdew='qdbus org.kde.plasmashell /PlasmaShell evaluateScript "lockCorona(false)'
#alias kdeW='qdbus org.kde.plasmashell /PlasmaShell evaluateScript "lockCorona(true)'

# Changing "ls" to "exa"
alias \
    ls="exa --group-directories-first --color=always" \
    l='ls -l' \
    la='ls -a' \
    lla='ls -la' \
    lt='ls --tree' \
    li='ls -a --icons'

# Tmux aliases
alias \
ta='tmux attach -t' \
tad='tmux attach -d -t' \
tkso='tmux kill-session -a' \
tkss='tmux kill-session -t' \
tksv='tmux kill-server' \
tl='tmux list-sessions' \
tmuxSrc="tmux source-file ~/.tmux.conf" \
ts='tmux new-session -s'

# Reloading configurations
alias Src="source ~/.dotfiles/.zprezto/runcoms/.zshrc"
alias Xrdb='xrdb ~/.Xresources'

# Pipe shortcuts
alias -g E="| $EDITOR"
alias -g F="| fzf"
alias -g G="| grep -i"
alias -g C="| wc -m"
alias -g W="| wc -w"
alias -g L="| wc -l"

#
## YAY-PACMAN
#

if (( $+commands[yay] )); then
  alias yayu="yay -Suy"
  alias yayU="yay -Su"
  alias yayy="yay -Sy"
  alias yayY="sudo yay -Fy"
  alias yayi="yay -S"
  alias yayI="sudo yay -U"
  alias yays="yay --sync --search"
  alias yayS="yay --query --search"
  alias yayq="yay --sync --info -i"
  alias yayQ="yay --query --info"
  alias yayl="yay --files --list"
  alias yayL="yay --query --list"
  alias yayo="yay --files --regex"
  alias yayO="yay --query --owns"
  alias yayk="sudo yay --query --check"
  alias yayc="sudo yay -Scc"
  alias yayx="sudo yay --remove --nosave"
  alias yayX="sudo yay --remove --nosave --recursive"
  alias yayr="sudo yay --remove --nosave --recursive --cascade"
  alias yayR="sudo yay --remove --nosave --recursive --recursive --cascade"
  alias yayol="yay -Qdt"
  alias yayor="yayr \$(yay -Qdtq)"
  alias yayb="makepkg -scCif"
  alias yayd="yay -G"
  alias yayD="yay -Gd"

  aurd() git clone https://aur.archlinux.org/$1.git

  compdef '_dispatch pacman pacman' yay
fi

# last 20 installed packages:
alias yay20="expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -n 20"
# last 100 installed packages:
alias yay100="expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -n 100"
# browse ALL installed packages with an instant preview of each package:
alias yayfzfa="pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'"
# browse installed by ME packages with an instant preview of each package:
alias yayfzf="pacman -Qeq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'"
# remove orphaned packages
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'

#
## PYTHON PIP
#

if (( $+commands[pip] )); then
  alias pipi="pip install --upgrade"
  alias pipI="pip install --upgrade --user"
  alias pipr="pip uninstall"
  alias pipl="pip list --format=columns --local"
  alias pipL="pip list --format=columns --user"
  alias pipf="pip freeze --local --all"
  alias pipfr="pip freeze --local --all >| requirements.txt"
  alias pipF="pip freeze --user"
  alias pipFr="pip freeze --user >| requirements.txt"
  alias pipd="pipdeptree -l"
  alias pipdd="pipdeptree -l | =grep -P '^(?!pip)(?!setuptools)(?!nvim)[\w0-9\-=.]+'"
  alias pipD="pipdeptree --user-only"
  alias pipu="pip-upgrade"
  alias pipU="pip-upgrade --skip-virtualenv-check"

  alias pyv="python3 -m venv"
  alias pyV="python3 -m venv --system-site-packages"
  alias pya="source bin/activate"
  alias pyd="deactivate"
fi


#
## APT
#

if (( $+commands[apt-get] )); then
  alias aptu="sudo apt update; sudo apt full-upgrade"
  alias aptU="sudo apt full-upgrade"
  alias apty="sudo apt update"
  alias apti="sudo apt install"
  alias aptI="sudo dpkg --install"
  alias aptx="sudo apt remove"
  alias aptr="sudo apt purge"
  alias aptc="sudo apt clean"
  alias aptq="apt show"
  alias aptp="apt policy"
  alias apts="apt search"
  alias aptS="dpkg-query -l"
  alias apto="dpkg-query -S"
  alias aptl="dpkg-query -L"
  alias aptL="dpkg-deb -c"
  alias aptor="sudo apt autoremove"
fi

### RANGER
# q quits ranger normally
# capital Q quits and changed dir
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )

    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$PWD" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}



# mkdir n cd
mkcdir ()
{
    mkdir -p -- "$1" &&
      cd -P -- "$1"
}


#prevent rm -rf /
# alias rm -rf /="echo BAD IDEA"
# alias rm -rf /*="echo BAD IDEA"
